// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectS4API.Data.DAO;

#nullable disable

namespace ProjectS4API.Data.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20250406194546_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectS4API.Data.Entities.CourseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoHId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluationId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResourcesId")
                        .HasColumnType("int");

                    b.Property<string>("ToolsDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoHId");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("ResourcesId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.CoursePrerequisiteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Prerequisite")
                        .HasColumnType("int");

                    b.Property<int?>("PrerequisiteEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("PrerequisiteEntityId");

                    b.ToTable("Course_Prerequisites");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.DoHEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("CM")
                        .HasColumnType("real");

                    b.Property<int>("ECT")
                        .HasColumnType("int");

                    b.Property<float>("TP")
                        .HasColumnType("real");

                    b.Property<float>("TPS")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Distribution_of_Hours");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.EvalCharsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<bool>("Oral")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Evaluation_Characteristics");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.EvaluationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FinalId")
                        .HasColumnType("int");

                    b.Property<int>("MidtermId")
                        .HasColumnType("int");

                    b.Property<int>("OngoingEvalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinalId");

                    b.HasIndex("MidtermId");

                    b.HasIndex("OngoingEvalId");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.ExamEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EvalCharsId")
                        .HasColumnType("int");

                    b.Property<bool>("isFinal")
                        .HasColumnType("bit");

                    b.Property<bool>("isGroupBased")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EvalCharsId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.HourEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("CM")
                        .HasColumnType("real");

                    b.Property<float>("TD")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Hours");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.KnowledgeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Knowledge");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.MethodEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Methods");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.MethodToolEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("MethodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("MethodId");

                    b.ToTable("Methods_and_Tools");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.OngoingEvalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EvalCharsId")
                        .HasColumnType("int");

                    b.Property<bool>("isPresentation")
                        .HasColumnType("bit");

                    b.Property<bool>("isProject")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EvalCharsId");

                    b.ToTable("Ongoing_Evaluations");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.PrerequisiteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Prerequisite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Prerequisites");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.ProfessorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Professors");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.ResourcesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Additional")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Core")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Web")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.TopicEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalResources")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoreResources")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("HourId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("HourId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.CourseEntity", b =>
                {
                    b.HasOne("ProjectS4API.Data.Entities.DoHEntity", "DoH")
                        .WithMany()
                        .HasForeignKey("DoHId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectS4API.Data.Entities.EvaluationEntity", "Evaluation")
                        .WithMany()
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectS4API.Data.Entities.ProfessorEntity", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectS4API.Data.Entities.ResourcesEntity", "Resources")
                        .WithMany()
                        .HasForeignKey("ResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoH");

                    b.Navigation("Evaluation");

                    b.Navigation("Professor");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.CoursePrerequisiteEntity", b =>
                {
                    b.HasOne("ProjectS4API.Data.Entities.CourseEntity", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectS4API.Data.Entities.PrerequisiteEntity", "PrerequisiteEntity")
                        .WithMany()
                        .HasForeignKey("PrerequisiteEntityId");

                    b.Navigation("Course");

                    b.Navigation("PrerequisiteEntity");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.EvaluationEntity", b =>
                {
                    b.HasOne("ProjectS4API.Data.Entities.ExamEntity", "Final")
                        .WithMany()
                        .HasForeignKey("FinalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectS4API.Data.Entities.ExamEntity", "Midterm")
                        .WithMany()
                        .HasForeignKey("MidtermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectS4API.Data.Entities.OngoingEvalEntity", "OngoingEval")
                        .WithMany()
                        .HasForeignKey("OngoingEvalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Final");

                    b.Navigation("Midterm");

                    b.Navigation("OngoingEval");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.ExamEntity", b =>
                {
                    b.HasOne("ProjectS4API.Data.Entities.EvalCharsEntity", "EvalChars")
                        .WithMany()
                        .HasForeignKey("EvalCharsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvalChars");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.KnowledgeEntity", b =>
                {
                    b.HasOne("ProjectS4API.Data.Entities.CourseEntity", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.MethodToolEntity", b =>
                {
                    b.HasOne("ProjectS4API.Data.Entities.CourseEntity", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectS4API.Data.Entities.MethodEntity", "Method")
                        .WithMany()
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Method");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.OngoingEvalEntity", b =>
                {
                    b.HasOne("ProjectS4API.Data.Entities.EvalCharsEntity", "EvalChars")
                        .WithMany()
                        .HasForeignKey("EvalCharsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvalChars");
                });

            modelBuilder.Entity("ProjectS4API.Data.Entities.TopicEntity", b =>
                {
                    b.HasOne("ProjectS4API.Data.Entities.CourseEntity", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectS4API.Data.Entities.HourEntity", "Hour")
                        .WithMany()
                        .HasForeignKey("HourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Hour");
                });
#pragma warning restore 612, 618
        }
    }
}
